// Code generated by MockGen. DO NOT EDIT.
// Source: sale_order.go

// Package sale_order is a generated GoMock package.
package sale_order

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockQueryExecutor) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockQueryExecutorMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockQueryExecutor)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockQueryExecutor) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockQueryExecutorMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockQueryExecutor)(nil).QueryContext), varargs...)
}
