// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -package=create_sale_order -source=handler.go -destination=mocks/handler.go
//

// Package create_sale_order is a generated GoMock package.
package create_sale_order

import (
	context "context"
	reflect "reflect"

	document "github.com/kiaplayer/clean-architecture-example/internal/domain/entity/document"
	gomock "go.uber.org/mock/gomock"
)

// MockuseCase is a mock of useCase interface.
type MockuseCase struct {
	ctrl     *gomock.Controller
	recorder *MockuseCaseMockRecorder
}

// MockuseCaseMockRecorder is the mock recorder for MockuseCase.
type MockuseCaseMockRecorder struct {
	mock *MockuseCase
}

// NewMockuseCase creates a new mock instance.
func NewMockuseCase(ctrl *gomock.Controller) *MockuseCase {
	mock := &MockuseCase{ctrl: ctrl}
	mock.recorder = &MockuseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuseCase) EXPECT() *MockuseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockuseCase) Handle(arg0 context.Context, arg1 *document.SaleOrder) (*document.SaleOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(*document.SaleOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockuseCaseMockRecorder) Handle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockuseCase)(nil).Handle), arg0, arg1)
}

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *Mocktransactor) RunInTx(ctx context.Context, fn func(context.Context) (any, error)) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, fn)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MocktransactorMockRecorder) RunInTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*Mocktransactor)(nil).RunInTx), ctx, fn)
}
