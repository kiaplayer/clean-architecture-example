// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package=sale_order -source=service.go -destination=mocks/service.go
//

// Package sale_order is a generated GoMock package.
package sale_order

import (
	context "context"
	reflect "reflect"

	document "github.com/kiaplayer/clean-architecture-example/internal/domain/entity/document"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *Mockrepository) CreateOrder(ctx context.Context, order *document.SaleOrder) (*document.SaleOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(*document.SaleOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockrepositoryMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*Mockrepository)(nil).CreateOrder), ctx, order)
}

// GetByID mocks base method.
func (m *Mockrepository) GetByID(ctx context.Context, id uint64) (*document.SaleOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*document.SaleOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockrepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*Mockrepository)(nil).GetByID), ctx, id)
}

// MockproductRepository is a mock of productRepository interface.
type MockproductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepositoryMockRecorder
}

// MockproductRepositoryMockRecorder is the mock recorder for MockproductRepository.
type MockproductRepositoryMockRecorder struct {
	mock *MockproductRepository
}

// NewMockproductRepository creates a new mock instance.
func NewMockproductRepository(ctrl *gomock.Controller) *MockproductRepository {
	mock := &MockproductRepository{ctrl: ctrl}
	mock.recorder = &MockproductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepository) EXPECT() *MockproductRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockproductRepository) Exists(ctx context.Context, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockproductRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockproductRepository)(nil).Exists), ctx, id)
}
