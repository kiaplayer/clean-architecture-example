// Code generated by MockGen. DO NOT EDIT.
// Source: use_case.go
//
// Generated by this command:
//
//	mockgen -package=create_sale_order -source=use_case.go -destination=mocks/use_case.go
//

// Package create_sale_order is a generated GoMock package.
package create_sale_order

import (
	context "context"
	reflect "reflect"
	time "time"

	document "github.com/kiaplayer/clean-architecture-example/internal/domain/entity/document"
	reference "github.com/kiaplayer/clean-architecture-example/internal/domain/entity/reference"
	gomock "go.uber.org/mock/gomock"
)

// MocktimeGenerator is a mock of timeGenerator interface.
type MocktimeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktimeGeneratorMockRecorder
}

// MocktimeGeneratorMockRecorder is the mock recorder for MocktimeGenerator.
type MocktimeGeneratorMockRecorder struct {
	mock *MocktimeGenerator
}

// NewMocktimeGenerator creates a new mock instance.
func NewMocktimeGenerator(ctrl *gomock.Controller) *MocktimeGenerator {
	mock := &MocktimeGenerator{ctrl: ctrl}
	mock.recorder = &MocktimeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeGenerator) EXPECT() *MocktimeGeneratorMockRecorder {
	return m.recorder
}

// NowDate mocks base method.
func (m *MocktimeGenerator) NowDate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowDate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// NowDate indicates an expected call of NowDate.
func (mr *MocktimeGeneratorMockRecorder) NowDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowDate", reflect.TypeOf((*MocktimeGenerator)(nil).NowDate))
}

// MocknumberGenerator is a mock of numberGenerator interface.
type MocknumberGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocknumberGeneratorMockRecorder
}

// MocknumberGeneratorMockRecorder is the mock recorder for MocknumberGenerator.
type MocknumberGeneratorMockRecorder struct {
	mock *MocknumberGenerator
}

// NewMocknumberGenerator creates a new mock instance.
func NewMocknumberGenerator(ctrl *gomock.Controller) *MocknumberGenerator {
	mock := &MocknumberGenerator{ctrl: ctrl}
	mock.recorder = &MocknumberGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknumberGenerator) EXPECT() *MocknumberGeneratorMockRecorder {
	return m.recorder
}

// GenerateNumber mocks base method.
func (m *MocknumberGenerator) GenerateNumber(date time.Time, company reference.Company) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNumber", date, company)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateNumber indicates an expected call of GenerateNumber.
func (mr *MocknumberGeneratorMockRecorder) GenerateNumber(date, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNumber", reflect.TypeOf((*MocknumberGenerator)(nil).GenerateNumber), date, company)
}

// MocksaleOrderService is a mock of saleOrderService interface.
type MocksaleOrderService struct {
	ctrl     *gomock.Controller
	recorder *MocksaleOrderServiceMockRecorder
}

// MocksaleOrderServiceMockRecorder is the mock recorder for MocksaleOrderService.
type MocksaleOrderServiceMockRecorder struct {
	mock *MocksaleOrderService
}

// NewMocksaleOrderService creates a new mock instance.
func NewMocksaleOrderService(ctrl *gomock.Controller) *MocksaleOrderService {
	mock := &MocksaleOrderService{ctrl: ctrl}
	mock.recorder = &MocksaleOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksaleOrderService) EXPECT() *MocksaleOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MocksaleOrderService) CreateOrder(ctx context.Context, order *document.SaleOrder) (*document.SaleOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(*document.SaleOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MocksaleOrderServiceMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MocksaleOrderService)(nil).CreateOrder), ctx, order)
}
