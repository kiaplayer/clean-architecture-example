// Code generated by MockGen. DO NOT EDIT.
// Source: use_case.go
//
// Generated by this command:
//
//	mockgen -package=get_sale_order -source=use_case.go -destination=mocks/use_case.go
//

// Package get_sale_order is a generated GoMock package.
package get_sale_order

import (
	context "context"
	reflect "reflect"

	document "github.com/kiaplayer/clean-architecture-example/internal/domain/entity/document"
	gomock "go.uber.org/mock/gomock"
)

// MocksaleOrderService is a mock of saleOrderService interface.
type MocksaleOrderService struct {
	ctrl     *gomock.Controller
	recorder *MocksaleOrderServiceMockRecorder
}

// MocksaleOrderServiceMockRecorder is the mock recorder for MocksaleOrderService.
type MocksaleOrderServiceMockRecorder struct {
	mock *MocksaleOrderService
}

// NewMocksaleOrderService creates a new mock instance.
func NewMocksaleOrderService(ctrl *gomock.Controller) *MocksaleOrderService {
	mock := &MocksaleOrderService{ctrl: ctrl}
	mock.recorder = &MocksaleOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksaleOrderService) EXPECT() *MocksaleOrderServiceMockRecorder {
	return m.recorder
}

// GetOrderByID mocks base method.
func (m *MocksaleOrderService) GetOrderByID(ctx context.Context, id uint64) (*document.SaleOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*document.SaleOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MocksaleOrderServiceMockRecorder) GetOrderByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MocksaleOrderService)(nil).GetOrderByID), ctx, id)
}
